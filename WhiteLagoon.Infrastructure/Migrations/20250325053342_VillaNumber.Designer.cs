// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WhiteLagoon.Infrastructure.Data;

#nullable disable

namespace WhiteLagoon.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250325053342_VillaNumber")]
    partial class VillaNumber
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WhiteLagoon.Domain.Entities.Villa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Created_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Occupancy")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Sqft")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Villas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "A luxurious villa with a stunning ocean view and private beach access.",
                            ImageUrl = "https://example.com/images/ocean-view-villa.jpg",
                            Name = "Ocean View Villa",
                            Occupancy = 6,
                            Price = 250.0,
                            Sqft = 3500
                        },
                        new
                        {
                            Id = 2,
                            Description = "A peaceful retreat nestled in the mountains, perfect for relaxation.",
                            ImageUrl = "https://example.com/images/mountain-retreat.jpg",
                            Name = "Mountain Retreat",
                            Occupancy = 4,
                            Price = 180.0,
                            Sqft = 2800
                        },
                        new
                        {
                            Id = 3,
                            Description = "A beautiful villa surrounded by lush tropical gardens.",
                            ImageUrl = "https://example.com/images/tropical-paradise.jpg",
                            Name = "Tropical Paradise",
                            Occupancy = 8,
                            Price = 320.0,
                            Sqft = 4200
                        },
                        new
                        {
                            Id = 4,
                            Description = "An elegant mansion with breathtaking lake views and modern amenities.",
                            ImageUrl = "https://example.com/images/lakeview-mansion.jpg",
                            Name = "Lakeview Mansion",
                            Occupancy = 10,
                            Price = 500.0,
                            Sqft = 5500
                        },
                        new
                        {
                            Id = 5,
                            Description = "A unique villa in the heart of the desert, featuring a private pool and spa.",
                            ImageUrl = "https://example.com/images/desert-oasis.jpg",
                            Name = "Desert Oasis",
                            Occupancy = 5,
                            Price = 220.0,
                            Sqft = 3000
                        },
                        new
                        {
                            Id = 6,
                            Description = "A secluded villa in the woods, offering tranquility and nature views.",
                            ImageUrl = "https://example.com/images/forest-hideaway.jpg",
                            Name = "Forest Hideaway",
                            Occupancy = 6,
                            Price = 260.0,
                            Sqft = 3300
                        },
                        new
                        {
                            Id = 7,
                            Description = "A modern villa with direct beach access and a private infinity pool.",
                            ImageUrl = "https://example.com/images/seaside-escape.jpg",
                            Name = "Seaside Escape",
                            Occupancy = 7,
                            Price = 400.0,
                            Sqft = 5000
                        });
                });

            modelBuilder.Entity("WhiteLagoon.Domain.Entities.VillaNumber", b =>
                {
                    b.Property<int>("Villa_Number")
                        .HasColumnType("int");

                    b.Property<string>("SpecialDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VillaId")
                        .HasColumnType("int");

                    b.HasKey("Villa_Number");

                    b.HasIndex("VillaId");

                    b.ToTable("VillaNumbers");

                    b.HasData(
                        new
                        {
                            Villa_Number = 101,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 102,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 103,
                            VillaId = 3
                        },
                        new
                        {
                            Villa_Number = 201,
                            VillaId = 1
                        },
                        new
                        {
                            Villa_Number = 202,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 203,
                            VillaId = 3
                        },
                        new
                        {
                            Villa_Number = 301,
                            VillaId = 2
                        },
                        new
                        {
                            Villa_Number = 302,
                            VillaId = 3
                        });
                });

            modelBuilder.Entity("WhiteLagoon.Domain.Entities.VillaNumber", b =>
                {
                    b.HasOne("WhiteLagoon.Domain.Entities.Villa", "Villa")
                        .WithMany()
                        .HasForeignKey("VillaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Villa");
                });
#pragma warning restore 612, 618
        }
    }
}
